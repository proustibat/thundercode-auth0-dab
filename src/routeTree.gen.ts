/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout/route'
import { Route as LayoutpublicIndexImport } from './routes/_layout/(public)/index'
import { Route as LayoutpublicProfileImport } from './routes/_layout/(public)/profile'
import { Route as LayoutprotectedAuthRouteImport } from './routes/_layout/(protected)/_auth/route'
import { Route as LayoutprotectedAuthProjectsImport } from './routes/_layout/(protected)/_auth/projects'

// Create Virtual Routes

const LayoutprotectedImport = createFileRoute('/_layout/(protected)')()

// Create/Update Routes

const LayoutRouteRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutprotectedRoute = LayoutprotectedImport.update({
  id: '/(protected)',
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutpublicIndexRoute = LayoutpublicIndexImport.update({
  id: '/(public)/',
  path: '/',
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutpublicProfileRoute = LayoutpublicProfileImport.update({
  id: '/(public)/profile',
  path: '/profile',
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutprotectedAuthRouteRoute = LayoutprotectedAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => LayoutprotectedRoute,
} as any)

const LayoutprotectedAuthProjectsRoute =
  LayoutprotectedAuthProjectsImport.update({
    id: '/projects',
    path: '/projects',
    getParentRoute: () => LayoutprotectedAuthRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_layout/(protected)': {
      id: '/_layout/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutprotectedImport
      parentRoute: typeof LayoutRouteImport
    }
    '/_layout/(protected)/_auth': {
      id: '/_layout/(protected)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutprotectedAuthRouteImport
      parentRoute: typeof LayoutprotectedRoute
    }
    '/_layout/(public)/profile': {
      id: '/_layout/(public)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof LayoutpublicProfileImport
      parentRoute: typeof LayoutRouteImport
    }
    '/_layout/(public)/': {
      id: '/_layout/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutpublicIndexImport
      parentRoute: typeof LayoutRouteImport
    }
    '/_layout/(protected)/_auth/projects': {
      id: '/_layout/(protected)/_auth/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof LayoutprotectedAuthProjectsImport
      parentRoute: typeof LayoutprotectedAuthRouteImport
    }
  }
}

// Create and export the route tree

interface LayoutprotectedAuthRouteRouteChildren {
  LayoutprotectedAuthProjectsRoute: typeof LayoutprotectedAuthProjectsRoute
}

const LayoutprotectedAuthRouteRouteChildren: LayoutprotectedAuthRouteRouteChildren =
  {
    LayoutprotectedAuthProjectsRoute: LayoutprotectedAuthProjectsRoute,
  }

const LayoutprotectedAuthRouteRouteWithChildren =
  LayoutprotectedAuthRouteRoute._addFileChildren(
    LayoutprotectedAuthRouteRouteChildren,
  )

interface LayoutprotectedRouteChildren {
  LayoutprotectedAuthRouteRoute: typeof LayoutprotectedAuthRouteRouteWithChildren
}

const LayoutprotectedRouteChildren: LayoutprotectedRouteChildren = {
  LayoutprotectedAuthRouteRoute: LayoutprotectedAuthRouteRouteWithChildren,
}

const LayoutprotectedRouteWithChildren = LayoutprotectedRoute._addFileChildren(
  LayoutprotectedRouteChildren,
)

interface LayoutRouteRouteChildren {
  LayoutprotectedRoute: typeof LayoutprotectedRouteWithChildren
  LayoutpublicProfileRoute: typeof LayoutpublicProfileRoute
  LayoutpublicIndexRoute: typeof LayoutpublicIndexRoute
}

const LayoutRouteRouteChildren: LayoutRouteRouteChildren = {
  LayoutprotectedRoute: LayoutprotectedRouteWithChildren,
  LayoutpublicProfileRoute: LayoutpublicProfileRoute,
  LayoutpublicIndexRoute: LayoutpublicIndexRoute,
}

const LayoutRouteRouteWithChildren = LayoutRouteRoute._addFileChildren(
  LayoutRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteRouteWithChildren
  '/': typeof LayoutpublicIndexRoute
  '/profile': typeof LayoutpublicProfileRoute
  '/projects': typeof LayoutprotectedAuthProjectsRoute
}

export interface FileRoutesByTo {
  '/': typeof LayoutpublicIndexRoute
  '/profile': typeof LayoutpublicProfileRoute
  '/projects': typeof LayoutprotectedAuthProjectsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteRouteWithChildren
  '/_layout/(protected)': typeof LayoutprotectedRouteWithChildren
  '/_layout/(protected)/_auth': typeof LayoutprotectedAuthRouteRouteWithChildren
  '/_layout/(public)/profile': typeof LayoutpublicProfileRoute
  '/_layout/(public)/': typeof LayoutpublicIndexRoute
  '/_layout/(protected)/_auth/projects': typeof LayoutprotectedAuthProjectsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/profile' | '/projects'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/profile' | '/projects'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/(protected)'
    | '/_layout/(protected)/_auth'
    | '/_layout/(public)/profile'
    | '/_layout/(public)/'
    | '/_layout/(protected)/_auth/projects'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRouteRoute: typeof LayoutRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRouteRoute: LayoutRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout/route.tsx",
      "children": [
        "/_layout/(protected)",
        "/_layout/(public)/profile",
        "/_layout/(public)/"
      ]
    },
    "/_layout/(protected)": {
      "filePath": "_layout/(protected)/_auth",
      "parent": "/_layout",
      "children": [
        "/_layout/(protected)/_auth"
      ]
    },
    "/_layout/(protected)/_auth": {
      "filePath": "_layout/(protected)/_auth/route.tsx",
      "parent": "/_layout/(protected)",
      "children": [
        "/_layout/(protected)/_auth/projects"
      ]
    },
    "/_layout/(public)/profile": {
      "filePath": "_layout/(public)/profile.tsx",
      "parent": "/_layout"
    },
    "/_layout/(public)/": {
      "filePath": "_layout/(public)/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/(protected)/_auth/projects": {
      "filePath": "_layout/(protected)/_auth/projects.tsx",
      "parent": "/_layout/(protected)/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
